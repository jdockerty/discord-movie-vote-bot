variables:
  DOCKER_TLS_CERTDIR: "/certs"

before-script:
  - apt-get update -qy
stages:
  - test
  - build
  # - deploy

# Test the running bot using the Python test file provided.
test-bot:
  stage: test
  image: python:3.8
  script:
    - pip install awscli
    - aws s3 cp s3://movie-vote-bot-bucket/config.yaml .
    - pip install -r requirements.txt
    - export bot_environment=testing
    - python bot.py &
    - python bot_test.py --channel 720200786167988297 --run all $TARGET_BOT_ID $TESTER_BOT_TOKEN
    - kill $!

# Build an image and push to AWS Elastic Container Registry (ECR)
build-image:
  stage: build
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - apt-get install python3 python3-pip
    - docker build -t discord-movie-bot:latest -f .docker/bot.yml .
    # - docker run my-image /script/to/run/tests
    - docker tag discord-movie-bot:latest 268906218954.dkr.ecr.eu-west-2.amazonaws.com/discord-movie-bot:latest
    - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 268906218954.dkr.ecr.eu-west-2.amazonaws.com
    - docker push 268906218954.dkr.ecr.eu-west-2.amazonaws.com/discord-movie-bot:latest

# production:
#   stage: deploy
#   script:
#     - apt-get update -qy
#   only:
#     - master